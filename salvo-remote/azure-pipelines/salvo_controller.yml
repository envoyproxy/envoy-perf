# Pipeline steps that execute the salvo-remote controller.
parameters:
- name: action
  displayName: "The action to perform, must be one of [preheat, run, cooldown]."
  type: string
  default: ""

steps:
- ${{ if eq(parameters.action, 'preheat') }}:
  - script: "envoy-perf/salvo-remote/azure-pipelines/scripts/asg_control.sh preheat"
    workingDirectory: "$(Build.SourcesDirectory)"
    displayName: "preheat the salvo-remote ASG"
    env:
      AWS_ACCESS_KEY_ID: $(SalvoAwsAccessKeyId)
      AWS_SECRET_ACCESS_KEY: $(SalvoAwsSecretAccessKey)

- ${{ if eq(parameters.action, 'run') }}:
  - ${{ if eq(variables['usePreviousBuildId'], '') }}:
    # Download salvo-remote from the current pipeline execution.
    - task: DownloadPipelineArtifact@2
      displayName: "Get current salvo-remote"
      inputs:
        buildType: "current"
        artifactName: "salvo-remote controller and sandboxes"
        targetPath: "$(System.ArtifactsDirectory)"

  - ${{ if ne(variables['usePreviousBuildId'], '') }}:
    - task: DownloadPipelineArtifact@2
      displayName: "Get $(usePreviousBuildId) salvo-remote"
    # Download salvo-remote built in a previous pipeline execution.
      inputs:
        buildType: "specific"
        project: "4684fb3d-0389-4e0b-8251-221942316e06" # envoy
        definition: "58" # salvo-mvp
        buildVersionToDownload: "specific"
        pipelineId: "$(usePreviousBuildId)"
        artifactName: "salvo-remote controller and sandboxes"
        targetPath: "$(System.ArtifactsDirectory)"


  - script: "unzip salvo-remote.zip"
    workingDirectory: $(System.ArtifactsDirectory)
    displayName: "unzip salvo-remote"

  - script: "./salvo-remote -build_id_override '$(usePreviousBuildId)' -build_id '$(Build.BuildId)'"
    workingDirectory: $(System.ArtifactsDirectory)
    displayName: "Run salvo-remote"

- ${{ if eq(parameters.action, 'cooldown') }}:
  - script: "envoy-perf/salvo-remote/azure-pipelines/scripts/asg_control.sh cooldown"
    workingDirectory: "$(Build.SourcesDirectory)"
    displayName: "preheat the salvo-remote ASG"
    env:
      AWS_ACCESS_KEY_ID: $(SalvoAwsAccessKeyId)
      AWS_SECRET_ACCESS_KEY: $(SalvoAwsSecretAccessKey)
