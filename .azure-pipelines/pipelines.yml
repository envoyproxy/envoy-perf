trigger:
  branches:
    include:
    - "main"

stages:
- stage: check
  dependsOn: []
  pool: "envoy-x64-large"
  jobs:
  - job: build_and_format
    displayName: "do_ci.sh"
    dependsOn: []
    strategy:
      maxParallel: 2
      matrix:
        build:
          CI_TARGET: "build"
        format:
          CI_TARGET: "check_format"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
- stage: check_salvo_remote
  dependsOn: []
  pool:
    vmImage: "ubuntu-20.04"
  jobs:
  - job: build_and_format
    displayName: "do_ci.sh"
    dependsOn: []
    strategy:
      maxParallel: 2
      matrix:
        build:
          CI_TARGET: "build_salvo_remote"
        format:
          CI_TARGET: "check_format_salvo_remote"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
        runInDocker: false


- stage: test
  dependsOn: ["check"]
  pool: "envoy-x64-large"
  jobs:
  - job: test
    displayName: "do_ci.sh"
    dependsOn: []
    strategy:
      maxParallel: 1
      matrix:
        test:
          CI_TARGET: "test"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
- stage: test_salvo_remote
  dependsOn: ["check_salvo_remote"]
  pool:
    vmImage: "ubuntu-20.04"
  jobs:
  - job: test
    displayName: "do_ci.sh"
    dependsOn: []
    strategy:
      maxParallel: 1
      matrix:
        test:
          CI_TARGET: "test_salvo_remote"
    timeoutInMinutes: 120
    steps:
    - template: bazel.yml
      parameters:
        ciTarget: $(CI_TARGET)
        runInDocker: false


# TODO(#187): Re-enable once coverage reporting is fixed.
#- stage: coverage
#  dependsOn: ["test"]
#  pool: "envoy-x64-large"
#  jobs:
#  - job: coverage
#    displayName: "do_ci.sh"
#    dependsOn: []
#    strategy:
#      maxParallel: 1
#      matrix:
#        coverage:
#          CI_TARGET: "coverage"
#    timeoutInMinutes: 120
#    steps:
#    - template: bazel.yml
#      parameters:
#        ciTarget: $(CI_TARGET)
#    - task: PublishPipelineArtifact@1
#      condition: always()
#      displayName: 'Publish the line coverage report'
#      inputs:
#        targetPath: $(System.DefaultWorkingDirectory)/salvo/coverage/html.zip
#        artifactName: CoverageReport-$(System.JobAttempt)
