#!/usr/bin/env python3
#
# Reads clean.csv and experimental,csv which is are generated by running
# siege multiple times, interleaving clean and experimental. Each file
# looks something like this:
#
#   Date & Time,         Trans, Elap Time, Data Trans, Resp Time, Trans Rate, Throughput, Concurrent, OKAY,  Failed
#   2018-10-07 09:40:58, 50000, 4.12,      151,        0.00,      12135.92,   36.65,      45.23,      50000, 0
#   2018-10-07 09:41:06, 50000, 3.92, 151, 0.00, 12755.10, 38.52, 47.26, 50000, 0
#   2018-10-07 09:41:13, 50000, 3.47, 151, 0.00, 14409.22, 43.52, 47.62, 50000, 0
#   2018-10-07 09:41:21, 50000, 3.45, 151, 0.00, 14492.75, 43.77, 45.88, 50000, 0
#   2018-10-07 09:41:28, 50000, 3.49, 151, 0.00, 14326.65, 43.27, 46.28, 50000, 0
#
# This script prints out standard deviation for each data-set, to make it
# obvious if it's noisy, and some basic comparisons.

import csv
import statistics
import sys

# Parses a CSV file into an array of maps from column-name to value.
# https://stackoverflow.com/questions/21572175/convert-csv-file-to-list-of-dictionaries
def parseCsv(file):
  with open(file) as f:
    return [{k: v for k, v in row.items()}
            for row in csv.DictReader(f, skipinitialspace=True)]

def columnValues(data, column_name):
  return [float(row[column_name]) for row in data]

def main(argv):
  # Setup reader.
  if len(argv) != 3:
    print('Usage: %s csv_file [column_name...]' % argv[0])
    print('if you omit the column name, %s will print them out' % argv[0])
    sys.exit(1)
  clean = parseCsv(argv[1])
  experimental = parseCsv(argv[2])

  # Set up a matrix for printing the analyzed results
  matrix = [["", "Clean", "Std Dev", "Experimental", "Std Dev", "Improvement"],
            ["", "-----", "-------", "------------", "-------", "-----------"]]

  def addRow(metric):
    clean_values = columnValues(clean, metric)
    exp_values = columnValues(experimental, metric)
    mean_clean = statistics.mean(clean_values)
    mean_exp = statistics.mean(exp_values)
    improvement = 0
    if mean_clean > 0:
      improvement_percent = 100 * ((mean_clean - mean_exp) / mean_clean)
      improvement = "%s%%" % round(improvement_percent, 3)
    matrix.append([
        metric,
        round(mean_clean, 2), round(statistics.stdev(clean_values), 3),
        round(mean_exp, 2), round(statistics.stdev(exp_values), 3),
        improvement])

  addRow("Trans Rate")
  addRow("Throughput")
  addRow("Failed")

  clean = parseCsv(argv[1].replace(".csv", ".mem"))
  experimental = parseCsv(argv[2].replace(".csv", ".mem"))

  addRow("Stats Mem")
  addRow("VSZ")
  addRow("RSS")

  for row in matrix:
    str = ""
    for col in row:
      str += "%-15s" % col
    print(str)

  sys.exit(0)

main(sys.argv)
